#Использовать json
#Использовать tempfiles

Функция ПолучитьИнформацию() Экспорт
	
	СтруктураОтвета = Новый Структура(
		"needSendReport, userMessage",
		МенеджерНастроек.ОтправлятьОтчет(),
		МенеджерНастроек.СообщениеПользователю()
	);

	ПарсерJSON = Новый ПарсерJSON;
	Возврат ПарсерJSON.ЗаписатьJSON(СтруктураОтвета);

КонецФункции

Процедура СохранитьОтчет(ПотокТелаЗапроса) Экспорт
	
	ВременныйКаталог   = ВременныеФайлы.СоздатьКаталог();

	Данные = ДанныеОтчетаОбОшибке(ПотокТелаЗапроса, ВременныйКаталог);
	
	ДанныеОтчетаОбОшибке = Данные.ДанныеОтчетаОбОшибке;
	Отчет                = Данные.Отчет;

	ОтчетОбОшибке = Новый ОтчетОбОшибке()
		.ДатаОтчета(ПрочитатьСвойствоСтруктуры(ДанныеОтчетаОбОшибке, "time"))
		.ИдентификаторКлиента(ПрочитатьСвойствоСтруктуры(ДанныеОтчетаОбОшибке, "clientInfo.systemInfo.clientID"))
		.ИдентификаторКонфигурации(ПрочитатьСвойствоСтруктуры(ДанныеОтчетаОбОшибке, "configInfo.hash"))
		.ИдентификаторОшибкиСистемный(
			ПрочитатьСвойствоСтруктуры(ДанныеОтчетаОбОшибке, "errorInfo.systemErrorInfo.clientStackHash"))
		.ИдентификаторОшибкиПриложения(
			ПрочитатьСвойствоСтруктуры(ДанныеОтчетаОбОшибке, "errorInfo.applicationErrorInfo.stackHash"))
		.Отчет(Отчет)
		.Скриншот(Скриншот(ДанныеОтчетаОбОшибке, ВременныйКаталог))
		.ДополнительныеФайлы(ДополнительныеФайлы(ДанныеОтчетаОбОшибке, ВременныйКаталог))
		.Сохранить();

	Сообщить("Добавлен отчет об ошибке " + ОтчетОбОшибке.Идентификатор, СтатусСообщения.Информация);

КонецПроцедуры

#Область ДанныеОтчетаОбОшибке

Функция ДанныеОтчетаОбОшибке(ПотокТелаЗапроса, ВременныйКаталог)
	
	ВременныйФайлАрхив = ВременныеФайлы.СоздатьФайл("zip");
	
	ЧтениеДанных = Новый ЧтениеДанных(ПотокТелаЗапроса);
	ДДЗапроса = ЧтениеДанных.Прочитать().ПолучитьДвоичныеДанные();
	ДДЗапроса.Записать(ВременныйФайлАрхив);
	ЧтениеДанных.Закрыть();

	ЧтениеZipФайла = Новый ЧтениеZipФайла(ВременныйФайлАрхив);
	ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
	ЧтениеZipФайла.Закрыть();

	ЧтениеТекста = Новый ЧтениеТекста(ОбъединитьПути(ВременныйКаталог, "report.json"));
	ОтчетОбОшибкеВФорматеJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	ПарсерJSON = Новый ПарсерJSON;
	ДанныеОтчетаОбОшибке = ПарсерJSON.ПрочитатьJSON(ОтчетОбОшибкеВФорматеJSON,,, Истина);

	ДанныеОтчетаОбОшибке.time = ПрочитатьДатуJSON(ДанныеОтчетаОбОшибке.time, ФорматДатыJSON.ISO);

	Данные = Новый Структура(
		"ДанныеОтчетаОбОшибке, Отчет",
		ДанныеОтчетаОбОшибке,
		ОтчетОбОшибкеВФорматеJSON 
	);

	Возврат Данные;

КонецФункции

Функция Скриншот(ДанныеОтчетаОбОшибке, ВременныйКаталог)

	Скриншот = Неопределено;

	Если ДанныеОтчетаОбОшибке.Свойство("screenshot") Тогда
	
		Файл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ДанныеОтчетаОбОшибке.screenshot.file));
		
		Если Файл.Существует() Тогда
			
			Скриншот = ПолучитьBase64СтрокуИзДвоичныхДанных(
				Новый ДвоичныеДанные(Файл.ПолноеИмя)
			);

		КонецЕсли;

	КонецЕсли;

	Возврат Скриншот;

КонецФункции

Функция ДополнительныеФайлы(ДанныеОтчетаОбОшибке, ВременныйКаталог)
	
	ДополнительныеФайлы = Новый Массив();

	Если ДанныеОтчетаОбОшибке.Свойство("additionalFiles") Тогда

		Для Каждого ИмяФайла Из  ДанныеОтчетаОбОшибке.additionalFiles Цикл

			Файл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
		
			Если Файл.Существует() Тогда
				ДополнительныеФайлы.Добавить(
					ПолучитьBase64СтрокуИзДвоичныхДанных(
						Новый ДвоичныеДанные(Файл.ПолноеИмя)
					)
				);
			КонецЕсли;		

		КонецЦикла;

	КонецЕсли;

	Возврат ДополнительныеФайлы;

КонецФункции

#КонецОбласти

Функция ПрочитатьСвойствоСтруктуры(Знач Структура, Знач Свойство)
	
	МассивСвойств = СтрРазделить(Свойство, ".", Ложь);

	Сч = 0;

	Для каждого Свойство Из МассивСвойств Цикл
		
		Если Структура.Свойство(Свойство) Тогда

			Если МассивСвойств.ВГраница() = Сч Тогда
				Возврат Структура[Свойство];
			Иначе
				Структура = Структура[Свойство];
			КонецЕсли;

		Иначе

			Возврат Неопределено;

		КонецЕсли;

		Сч = Сч + 1;

	КонецЦикла;

КонецФункции